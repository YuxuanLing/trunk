
__kernel void QueryMinimumGranularity(int nLoop, __global int *pOut)
{
    __local volatile int flag;

    int index = get_global_id(0);
    int totalItems = get_global_size(0);

    do
    {
        int halfIndex = totalItems / 2;
        if(index == 0)
            flag = 1;

        barrier(CLK_LOCAL_MEM_FENCE);

        if(index < halfIndex)
        {
            for(int i = 0; i < nLoop; i++)
            {
                if(flag == -1)
                    break;
            }
            if(flag != -1)
            {
                if(index == 0)
                {
                    *pOut = totalItems;
                    flag = 2;
                }
            }
        }
        else
        {
            if(index == halfIndex)
            {
                if(flag != 2)
                {
                    //while(flag != 1);
                    flag = -1;
                }
            }
        }

        barrier(CLK_LOCAL_MEM_FENCE);

        if(flag == 2)
            break;

        totalItems /= 2;
    }
    while(totalItems > 0);
}

/*
#define N (     * 1024)

__kernel void QueryMinimumGranularity(void)
{
    __local volatile int sum[16 * 1024];

    int index = get_global_id(0);
}
*/

