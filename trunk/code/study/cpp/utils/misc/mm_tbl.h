/**********************************************************************************************************************
*	$Log: vsys#comm#cmodel#inc#mm_tbl.h_1,v $
*	Revision 1.3  2006-05-31 14:41:49-07  lsha
*	...No comments entered during checkin...
*
*
*	DESCRIPTION:
*	Constant/default tables for multimedia related applications.
*
**********************************************************************************************************************/

#ifndef	MM_TBL
#define	MM_TBL						"          MM_TBL >>>    "
/**	MM_TBL
 */

#include	"cinclude.h"



#ifdef	__cplusplus
	extern	"C"
	{
#endif

/**	SECTION - miscellaneous
 */
	/* Constant 8x8 matrix */
	Global	SIGN32	mem_zero			[]
						#ifdef	__MAIN__
						= {	 0,  0,  0,  0,  0,  0,  0,  0,
							 0,  0,  0,  0,  0,  0,  0,  0,
							 0,  0,  0,  0,  0,  0,  0,  0,
							 0,  0,  0,  0,  0,  0,  0,  0,
							 0,  0,  0,  0,  0,  0,  0,  0,
							 0,  0,  0,  0,  0,  0,  0,  0,
							 0,  0,  0,  0,  0,  0,  0,  0,
							 0,  0,  0,  0,  0,  0,  0,  0,
								 }
						#endif
						,
					mem_c16				[]
						#ifdef	__MAIN__
						= {	16, 16, 16, 16, 16, 16, 16, 16,
							16, 16, 16, 16, 16, 16, 16, 16,
							16, 16, 16, 16, 16, 16, 16, 16,
							16, 16, 16, 16, 16, 16, 16, 16,
							16, 16, 16, 16, 16, 16, 16, 16,
							16, 16, 16, 16, 16, 16, 16, 16,
							16, 16, 16, 16, 16, 16, 16, 16,
							16, 16, 16, 16, 16, 16, 16, 16,
								 }
						#endif
						;

	/* Macroblock/block buffer/ordering */
	Global	SIGN32	arrs32blkp2			[]
						#ifdef	__MAIN__
						= {	 4,  2,  2,  1 }
						#endif
						,
					arrs32blkp8			[]
						#ifdef	__MAIN__
						= {	64, 32, 32, 16 }
						#endif
						,
					arrs32blkp16		[]
						#ifdef	__MAIN__
						= {256,128,128, 64 }
						#endif
						,
					arrs32ptt4x4remap	[]			/* Hierachical 16 4x4 partition remap to raster order */
						#ifdef	__MAIN__
						= {	 0,  1,  4,  5,
							 2,  3,  6,  7,
							 8,  9, 12, 13,
							10, 11, 14, 15,
								 }
						#endif
						,
					arrs32ptr4x4in8x8	[]			/* Hierachical 16 4x4 partition pointer offsets in 8x8x4 buffer */
						#ifdef	__MAIN__
						= {	 0,  4,
							32, 36, 64, 68,
									96,100,
						   128,132,
						   160,164,192,196,
								   224,228,
								 }
						#endif
						;
/**	ENDOFSECTION
 */



/**	SECTION - default scan tables
 */
	/* Scan tables for MPEG-1/2/4, H.263 */
	Global	SIGN32	arrs32z8x8			[]			/* 8x8 zigzag scan */
						#ifdef	__MAIN__
						= {	 0,  1,  8, 16,  9,  2,  3, 10,
							17, 24, 32, 25, 18, 11,  4,  5,
							12, 19, 26, 33, 40, 48, 41, 34,
							27, 20, 13,  6,  7, 14, 21, 28,
							35, 42, 49, 56, 57, 50, 43, 36,
							29, 22, 15, 23, 30, 37, 44, 51,
							58, 59, 52, 45, 38, 31, 39, 46,
							53, 60, 61, 54, 47, 55, 62, 63,
								 }
						#endif
						,
					arrs32z8x8h			[]			/* 8x8 intra horizontal scan */
						#ifdef	__MAIN__
						= {	 0,  1,  2,  3,  8,  9, 16, 17,
							10, 11,  4,  5,  6,  7, 15, 14,
							13, 12, 19, 18, 24, 25, 32, 33,
							26, 27, 20, 21, 22, 23, 28, 29,
							30, 31, 34, 35, 40, 41, 48, 49,
							42, 43, 36, 37, 38, 39, 44, 45,
							46, 47, 50, 51, 56, 57, 58, 59,
							52, 53, 54, 55, 60, 61, 62, 63,
								 }
						#endif
						,
					arrs32z8x8v			[]			/* 8x8 intra vertical scan */
						#ifdef	__MAIN__
						= {	 0,  8, 16, 24,  1,  9,  2, 10,
							17, 25, 32, 40, 48, 56, 57, 49,
							41, 33, 26, 18,  3, 11,  4, 12,
							19, 27, 34, 42, 50, 58, 35, 43,
							51, 59, 20, 28,  5, 13,  6, 14,
							21, 29, 36, 44, 52, 60, 37, 45,
							53, 61, 22, 30,  7, 15, 23, 31,
							38, 46, 54, 62, 39, 47, 55, 63,
								 }
						#endif
						,
	GlobalAssign(*	arrs32z8x8alt		,			/* 8x8 alternate scan */
						arrs32z8x8v
						);

	/* Scan tables for WMV-9 */
	Global	SIGN32	arrs32z8x8wmv9		[]			/* 8x8 intra normal scan */
						#ifdef	__MAIN__
						= {	 0,  8,  1,  2,  9, 16, 24, 17,
							10,  3,  4, 11, 18, 25, 32, 40,
							33, 48, 26, 19, 12,  5,  6, 13,
							20, 27, 34, 41, 56, 49, 57, 42,
							35, 28, 21, 14,  7, 15, 22, 29,
							36, 43, 50, 58, 51, 59, 44, 37,
							30, 23, 31, 38, 45, 52, 60, 53,
							61, 46, 39, 47, 54, 62, 55, 63,
								 }
						#endif
						,
					arrs32z8x8wmv9h		[]			/* 8x8 intra horizontal scan */
						#ifdef	__MAIN__
						= {	 0,  1,  8,  2,  3,  9, 16, 24,
							17, 10,  4,  5, 11, 18, 25, 32,
							40, 48, 33, 26, 19, 12,  6,  7,
							13, 20, 27, 34, 41, 56, 49, 57,
							42, 35, 28, 21, 14, 15, 22, 29,
							36, 43, 50, 58, 51, 44, 37, 30,
							23, 31, 38, 45, 52, 59, 60, 53,
							46, 39, 47, 54, 61, 62, 55, 63,
								 }
						#endif
						,
					arrs32z8x8wmv9v		[]			/* 8x8 intra vertical scan */
						#ifdef	__MAIN__
						= {	 0,  8, 16,  1, 24, 32, 40,  9,
							 2,  3, 10, 17, 25, 48, 56, 41,
							33, 26, 18, 11,  4,  5, 12, 19,
							27, 34, 49, 57, 50, 42, 35, 28,
							20, 13,  6,  7, 14, 21, 29, 36,
							43, 51, 58, 59, 52, 44, 37, 30,
							22, 15, 23, 31, 38, 45, 60, 53,
							46, 39, 47, 54, 61, 62, 55, 63,
								 }
						#endif
						,
					arrs32z8x8wmv9p		[]			/* 8x8 inter progressive scan */
						#ifdef	__MAIN__
						= {	 0,  8,  1,  2,  9, 16, 24, 17,
							10,  3,  4, 11, 18, 25, 32, 40,
							48, 56, 41, 33, 26, 19, 12,  5,
							 6, 13, 20, 27, 34, 49, 57, 58,
							50, 42, 35, 28, 21, 14,  7, 15,
							22, 29, 36, 43, 51, 59, 60, 52,
							44, 37, 30, 23, 31, 38, 45, 53,
							61, 62, 54, 46, 39, 47, 55, 63,
								 }
						#endif
						,
					arrs32z8x8wmv9i		[]			/* 8x8 inter interlace scan */
						#ifdef	__MAIN__
						= {	 0,  8,  1, 16, 24,  9,  2, 32,
							40, 48, 56, 17, 10,  3, 25, 18,
							11,  4, 33, 41, 49, 57, 26, 34,
							42, 50, 58, 19, 12,  5, 27, 20,
							13,  6, 35, 28, 21, 14,  7, 15,
							22, 29, 36, 43, 51, 59, 60, 52,
							44, 37, 30, 23, 31, 38, 45, 53,
							61, 62, 54, 46, 39, 47, 55, 63,
								 }
						#endif
						,
					arrs32z4x4wmv9p		[]			/* 4x4 (in 8x8 buffer) progressive scan */
						#ifdef	__MAIN__
						= {	 0,  8, 16,  1,
							 9, 24, 17,  2,
							10, 18, 25,  3,
							11, 26, 19, 27,  4, 12, 20,  5,
											13, 28, 21,  6,
											14, 22, 29,  7,
											15, 30, 23, 31,
							32, 40, 48, 33,
							41, 56, 49, 34,
							42, 50, 57, 35,
							43, 58, 51, 59, 36, 44, 52, 37,
											45, 60, 53, 38,
											46, 54, 61, 39,
											47, 62, 55, 63,
								 }
						#endif
						,
					arrs32z4x4wmv9i		[]			/* 4x4 (in 8x8 buffer) interlace scan */
						#ifdef	__MAIN__
						= {	 0,  8, 16, 24,
							 1,  9, 17,  2,
							25, 10, 18,  3,
							26, 11, 19, 27,  4, 12, 20, 28,
											 5, 13, 21,  6,
											29, 14, 22,  7,
											30, 15, 23, 31,
							32, 40, 48, 56,
							33, 41, 49, 34,
							57, 42, 50, 35,
							58, 43, 51, 59, 36, 44, 52, 60,
											37, 45, 53, 38,
											61, 46, 54, 39,
											62, 47, 55, 63,
								 }
						#endif
						,
					arrs32z8x4wmv9		[]			/* 8x4 (in 8x8 buffer) progressive scan (simple/main profile) */
						#ifdef	__MAIN__
						= {	 0,  1,  2,  8,  3,  9, 10, 16,
							 4, 11, 17, 24, 18, 12,  5, 19,
							25, 13, 20, 26, 27,  6, 21, 28,
							14, 22, 29,  7, 30, 15, 23, 31,

							32, 33, 34, 40, 35, 41, 42, 48,
							36, 43, 49, 56, 50, 44, 37, 51,
							57, 45, 52, 58, 59, 38, 53, 60,
							46, 54, 61, 39, 62, 47, 55, 63,
 								 }
						#endif
						,
					arrs32z8x4wmv9p		[]			/* 8x4 (in 8x8 buffer) progressive scan (advanced profile) */
						#ifdef	__MAIN__
						= {	 0,  8,  1, 16,  2,  9, 10,  3,
							24, 17,  4, 11, 18, 12,  5, 19,
							25, 13, 20, 26, 27,  6, 21, 28,
							14, 22, 29,  7, 30, 15, 23, 31,

							32, 40, 33, 48, 34, 41, 42, 35,
							56, 49, 36, 43, 50, 44, 37, 51,
							57, 45, 52, 58, 59, 38, 53, 60,
							46, 54, 61, 39, 62, 47, 55, 63,
 								 }
						#endif
						,
					arrs32z8x4wmv9i		[]			/* 8x4 (in 8x8 buffer) interlace scan */
						#ifdef	__MAIN__
						= {	 0,  8, 16, 24,  1,  9,  2, 17,
							25, 10,  3, 18, 26,  4, 11, 19,
							12,  5, 13, 20, 27,  6, 21, 28,
							14, 22, 29,  7, 30, 15, 23, 31,

 							32, 40, 48, 56, 33, 41, 34, 49,
							57, 42, 35, 50, 58, 36, 43, 51,
							44, 37, 45, 52, 59, 38, 53, 60,
							46, 54, 61, 39, 62, 47, 55, 63,
 								 }
						#endif
						,
					arrs32z4x8wmv9		[]			/* 4x8 (in 8x8 buffer) progressive scan (simple/main profile) */
						#ifdef	__MAIN__
						= {	 0,  8,  1, 16,
							 9, 24, 17,  2,
							32, 10, 25, 40,
							18, 48, 33, 26,
							56, 41, 34,  3,
							49, 57, 11, 42,
							19, 50, 27, 58,
							35, 43, 51, 59,  4, 12,  5, 20,
											13, 28, 21,  6,
											36, 14, 29, 44,
											22, 52, 37, 30,
											60, 45, 38,  7,
											53, 61, 15, 46,
											23, 54, 31, 62,
											39, 47, 55, 63,
								 }
						#endif
						,
					arrs32z4x8wmv9p		[]			/* 4x8 (in 8x8 buffer) progressive scan (advanced profile) */
						#ifdef	__MAIN__
						= {	 0,  1,  8,  2,
							 9, 16, 17, 24,
							10, 32, 25, 18,
							40,  3, 33, 26,
							48, 11, 56, 41,
							34, 49, 57, 42,
							19, 50, 27, 58,
							35, 43, 51, 59,  4,  5, 12,  6,
											13, 20, 21, 28,
											14, 36, 29, 22,
											44,  7, 37, 30,
											52, 15, 60, 45,
											38, 53, 61, 46,
											23, 54, 31, 62,
											39, 47, 55, 63,
 								 }
						#endif
						,
					arrs32z4x8wmv9i		[]			/* 4x8 (in 8x8 buffer) interlace scan */
						#ifdef	__MAIN__
						= {	 0,  1,  2,  8,
							16,  9, 24, 17,
							10,  3, 32, 40,
							48, 56, 25, 18,
							33, 26, 41, 34,
							49, 57, 11, 42,
							19, 50, 27, 58,
							35, 43, 51, 59,  4,  5,  6, 12,
											20, 13, 28, 21,
											14,  7, 36, 44,
											52, 60, 29, 22,
											37, 30, 45, 38,
											53, 61, 15, 46,
											23, 54, 31, 62,
											39, 47, 55, 63,
 								 }
						#endif
						;

	/* Scan tables for AVS */
	Global	SIGN32
	GlobalAssign(*	arrs32z8x8avsvp		,			/* 8x8 progressive scan */
						arrs32z8x8
						),
					arrs32z8x8avsvi		[]			/* 8x8 interlace scan */
						#ifdef	__MAIN__
						= {	 0,  8, 16,  1, 24, 32,  9, 17,
							40, 48, 25,  2, 10, 56, 33, 18,
							 3, 41, 49, 26, 11, 19,  4, 57,
							34, 12, 42, 27, 20, 50, 35, 28,
							 5, 13, 58, 43, 36, 21,  6, 29,
							51, 44, 14, 22, 37, 59, 52, 30,
							45, 60, 38, 53, 46, 61, 54,  7,
							62, 15, 23, 31, 39, 47, 55, 63,
								 }
						#endif
						;

	/* Scan tables for H.264 */
	Global	SIGN32
	GlobalAssign(*	arrs32z8x8h264p		,			/* 8x8 progressive scan */
						arrs32z8x8
						),
					arrs32z8x8h264i		[]			/* 8x8 interlace scan */
						#ifdef	__MAIN__
						= {	 0,  8, 16,  1,  9, 24, 32, 17,
							 2, 25, 40, 48, 56, 33, 10,  3,
							18, 41, 49, 57, 26, 11,  4, 19,
							34, 42, 50, 58, 27, 12,  5, 20,
							35, 43, 51, 59, 28, 13,  6, 21,
							36, 44, 52, 60, 29, 14, 22, 37,
							45, 53, 61, 30,  7, 15, 38, 46,
							54, 62, 23, 31, 39, 47, 55, 63,
								 }
						#endif
						,
					arrs32z4x4h264p		[]			/* 4x4 (in 8x8 buffer) progressive scan */
						#ifdef	__MAIN__
						= {	 0,  1,  8, 16,
							 9,  2,  3, 10,
							17, 24, 25, 18,
							11, 19, 26, 27,  4,  5, 12, 20,
											13,  6,  7, 14,
											21, 28, 29, 22,
											15, 23, 30, 31,
							32, 33, 40, 48,
							41, 34, 35, 42,
							49, 56, 57, 50,
							43, 51, 58, 59, 36, 37, 44, 52,
											45, 38, 39, 46,
											53, 60, 61, 54,
											47, 55, 62, 63,
								 }
						#endif
						,
					arrs32z4x4h264i		[]			/* 4x4 (in 8x8 buffer) interlace scan */
						#ifdef	__MAIN__
						= {	 0,  8,  1, 16,
							24,  9, 17, 25,
							 2, 10, 18, 26,
							 3, 11, 19, 27,  4, 12,  5, 20,
											28, 13, 21, 29,
											 6, 14, 22, 30,
											 7, 15, 23, 31,
							32, 40, 33, 48,
							56, 41, 49, 57,
							34, 42, 50, 58,
							35, 43, 51, 59, 36, 44, 37, 52,
											60, 45, 53, 61,
											38, 46, 54, 62,
											39, 47, 55, 63,
								 }
						#endif
						,
					arrs32z4x4h264dcp	[]			/* 4x4 intra luma dc (in 8x8x4 buffer) progressive scan */
						#ifdef	__MAIN__
						= {	 0, 16, 32,128,
							48, 64, 80, 96,
						   144,160,176,192,
						   112,208,224,240,
								 }
						#endif
						,
					arrs32z4x4h264dci	[]			/* 4x4 intra luma dc (in 8x8x4 buffer) interlace scan */
						#ifdef	__MAIN__
						= {	 0, 32, 16,128,
						   160, 48,144,176,
							64, 96,192,224,
							80,112,208,240,
								 }
						#endif
						,
	GlobalAssign(*	arrs32z2x2h264c		,			/* 2x2 chroma dc (in 8x8 buffer) scan */
						arrs32ptr4x4in8x8
						);

	Global	SIGN32	*arrps32z8x8		[]			/* Typical 8x8/8x4/4x8/4x4 (in 8x8 buffer) scan tables */
						#ifdef	__MAIN__
						= {	 arrs32z8x8, arrs32z8x4wmv9p, arrs32z4x8wmv9p, arrs32z4x4h264p,
								 }
						#endif
						;
/**	ENDOFSECTION
 */



/**	SECTION - QP->step tables
 */
	/* QP mapping for MPEG non/linear styles */
	Global	SIGN32	arrs32mpg2qstep		[]			/* Q-step for dequantization of ac (non-linear) */
						#ifdef	__MAIN__
						= {	 1,  1,  2,  3,  4,  5,  6,  7,  8, 10, 12, 14, 16, 18, 20, 22,
							24, 28, 32, 36, 40, 44, 48, 52, 56, 64, 72, 80, 88, 96,104,112,
								 }
						#endif
						,
					arrs32wmv9qstep		[]			/* Q-step for dequantization of ac (linear) */
						#ifdef	__MAIN__
						= {	 1,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
							32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
							 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31,
							33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63,
								 }
						#endif
						,
					arrs32mpg4dcq		[]			/* Q-step for dequantization of dc (MPEG-4) */
						#ifdef	__MAIN__
						= {	 1,  8,  8,  8,  8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23,
							24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 40, 42, 44, 46,

							 1,  8,  8,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14,
							14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25,
								 }
						#endif
						,
					arrs32wmv9dcq		[]			/* Q-step for dequantization of dc (WMV-9) */
						#ifdef	__MAIN__
						= {	 1,  2,  4,  8,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13,
							14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21,
								 }
						#endif
						;
													/* Inverse of Q-step for quantization */
	#define			QstpInv(b, q)		UNSGDIV(1 << (b), q)
	#define			QstpInvMPG(qp)		QstpInv(15, qp)
	#define			QstpInvMPG2(qp)		QstpInv(16, arrs32mpg2qstep(qp))

	/* QP mapping and shift bits table for AVS */
	Global	SIGN32	arrs32avsvqbit		[]			/* QP shift bits in AVS */
						#ifdef	__MAIN__
						= {	14, 14, 14, 14, 14, 14, 14, 14,
							13, 13, 13, 13, 13, 13, 13, 13,
							13, 12, 12, 12, 12, 12, 12, 12,
							11, 11, 11, 11, 11, 11, 11, 11,
							11, 10, 10, 10, 10, 10, 10, 10,
							10,  9,  9,  9,  9,  9,  9,  9,
							 9,  8,  8,  8,  8,  8,  8,  8,
							 7,  7,  7,  7,  7,  7,  7,  7,
								 }
						#endif
						,
					arrs32avsvqstep		[]			/* Q-step for dequantization */
						#ifdef	__MAIN__
						= {	 32768,  36061,  38968,  42495,  46341,  50535,  55437,  60424,
							 32932,  35734,  38968,  42495,  46177,  50535,  55109,  59933,
							 65535,  35734,  38968,  42577,  46341,  50617,  55027,  60097,
							 32809,  35734,  38968,  42454,  46382,  50576,  55109,  60056,
							 65535,  35734,  38968,  42495,  46320,  50515,  55109,  60076,
							 65535,  35744,  38968,  42495,  46341,  50535,  55099,  60087,
							 65535,  35734,  38973,  42500,  46341,  50535,  55109,  60097,
							 32771,  35734,  38965,  42497,  46341,  50535,  55109,  60099,
								 }
						#endif
						;
													/* Inverse of Q-step for quantization */
	#define			QstpInvAVS(qp)		QstpInv(16 + arrs32avsvqbit[qp], arrs32avsvqstep[qp])

	/* QP mapping and QP%6 coefficient matrix for H.264 */
	Global	SIGN32	arrs32h264qrem		[]			/* QP->qrem (QP%6) in H.264 */
						#ifdef	__MAIN__
						= {	 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,  4,  5,
							 0,  1,  2,  3,
								 }
						#endif
						,
					arrs32h264qper		[]			/* QP->qper (QP/6) in H.264 */
						#ifdef	__MAIN__
						= {	 0,  0,  0,  0,  0,  0,
							 1,  1,  1,  1,  1,  1,
							 2,  2,  2,  2,  2,  2,
							 3,  3,  3,  3,  3,  3,
							 4,  4,  4,  4,  4,  4,
							 5,  5,  5,  5,  5,  5,
							 6,  6,  6,  6,  6,  6,
							 7,  7,  7,  7,  7,  7,
							 8,  8,  8,  8,
								 }
						#endif
						,
					arr3s32q6x4x4h264	[][2][2]	/* 6 tables for 4x4 block dequantization */
						#ifdef	__MAIN__
						= {	{ { 10, 13 },
							  { 13, 16 },
									 },
							{ { 11, 14 },
							  { 14, 18 },
									 },
							{ { 13, 16 },
							  { 16, 20 },
									 },
							{ { 14, 18 },
							  { 18, 23 },
									 },
							{ { 16, 20 },
							  { 20, 25 },
									 },
							{ { 18, 23 },
							  { 23, 29 },
									 },
								 }
						#endif
						,
					arr3s32q6x8x8h264	[][4][4]	/* 6 tables for 8x8 block dequantization */
						#ifdef	__MAIN__
						= {	{ { 20, 19, 25, 19 },
							  { 19, 18, 24, 18 },
							  { 25, 24, 32, 24 },
							  { 19, 18, 24, 18 },
									 },
							{ { 22, 21, 28, 21 },
							  { 21, 19, 26, 19 },
							  { 28, 26, 35, 26 },
							  { 21, 19, 26, 19 },
									 },
							{ { 26, 24, 33, 24 },
							  { 24, 23, 31, 23 },
							  { 33, 31, 42, 31 },
							  { 24, 23, 31, 23 },
									 },
							{ { 28, 26, 35, 26 },
							  { 26, 25, 33, 25 },
							  { 35, 33, 45, 33 },
							  { 26, 25, 33, 25 },
									 },
							{ { 32, 30, 40, 30 },
							  { 30, 28, 38, 28 },
							  { 40, 38, 51, 38 },
							  { 30, 28, 38, 28 },
									 },
							{ { 36, 34, 46, 34 },
							  { 34, 32, 43, 32 },
							  { 46, 43, 58, 43 },
							  { 34, 32, 43, 32 },
									 },
								 }
						#endif
						,
					arr3s32i6x4x4h264	[][2][2]	/* 6 tables for 4x4 block quantization */
						#ifdef	__MAIN__
						= {	{ {  13107,   8066 },
							  {   8066,   5243 },
									 },
							{ {  11916,   7490 },
							  {   7490,   4660 },
									 },
							{ {  10082,   6554 },
							  {   6554,   4194 },
									 },
							{ {   9362,   5825 },
							  {   5825,   3647 },
									 },
							{ {   8192,   5243 },
							  {   5243,   3355 },
									 },
							{ {   7282,   4559 },
							  {   4559,   2893 },
									 },
								 }
						#endif
						,
					arr3s32i6x8x8h264	[][4][4]	/* 6 tables for 8x8 block quantization */
						#ifdef	__MAIN__
						= {	{ {  13107,  12222,  16777,  12222 },
							  {  12222,  11428,  15481,  11428 },
							  {  16777,  15481,  20972,  15481 },
							  {  12222,  11428,  15481,  11428 },
									 },
							{ {  11916,  11058,  14980,  11058 },
							  {  11058,  10826,  14290,  10826 },
							  {  14980,  14290,  19174,  14290 },
							  {  11058,  10826,  14290,  10826 },
									 },
							{ {  10082,   9675,  12710,   9675 },
							  {   9675,   8943,  11985,   8943 },
							  {  12710,  11985,  15978,  11985 },
							  {   9675,   8943,  11985,   8943 },
									 },
							{ {   9362,   8931,  11984,   8931 },
							  {   8931,   8228,  11259,   8228 },
							  {  11984,  11259,  14913,  11259 },
							  {   8931,   8228,  11259,   8228 },
									 },
							{ {   8192,   7740,  10486,   7740 },
							  {   7740,   7346,   9777,   7346 },
							  {  10486,   9777,  13159,   9777 },
							  {   7740,   7346,   9777,   7346 },
									 },
							{ {   7282,   6830,   9118,   6830 },
							  {   6830,   6428,   8640,   6428 },
							  {   9118,   8640,  11570,   8640 },
							  {   6830,   6428,   8640,   6428 },
									 },
								 }
						#endif
						;
/**	ENDOFSECTION
 */



/**	SECTION - default q-matrix tables
 */
	/* Standard matrix for MPEG-1/2 and MPEG-4 */
	Global	SIGN32
	GlobalAssign(*	arrs32mpg2mtxN		,			/* MPEG-2 inter matrix */
						mem_c16
						),
					arrs32mpg2mtxI		[]			/* MPEG-2 intra matrix */
						#ifdef	__MAIN__
						= {	 8, 16, 19, 22, 26, 27, 29, 34,
							16, 16, 22, 24, 27, 29, 34, 37,
							19, 22, 26, 27, 29, 34, 34, 38,
							22, 22, 26, 27, 29, 34, 37, 40,
							22, 26, 27, 29, 32, 35, 40, 48,
							26, 27, 29, 32, 35, 40, 48, 58,
							26, 27, 29, 34, 38, 46, 56, 69,
							27, 29, 35, 38, 46, 56, 69, 83,
								 }
						#endif
						,
					arrs32mpg4mtxN		[]			/* MPEG-4 inter matrix */
						#ifdef	__MAIN__
						= {	16, 17, 18, 19, 20, 21, 22, 23,
							17, 18, 19, 20, 21, 22, 23, 24,
							18, 19, 20, 21, 22, 23, 24, 25,
							19, 20, 21, 22, 23, 24, 26, 27,
							20, 21, 22, 23, 25, 26, 27, 28,
							21, 22, 23, 24, 26, 27, 28, 30,
							22, 23, 24, 26, 27, 28, 30, 31,
							23, 24, 25, 27, 28, 30, 31, 33,
								 }
						#endif
						,
					arrs32mpg4mtxI		[]			/* MPEG-4 intra matrix */
						#ifdef	__MAIN__
						= {	 8, 17, 18, 19, 21, 23, 25, 27,
							17, 18, 19, 21, 23, 25, 27, 28,
							20, 21, 22, 23, 24, 26, 28, 30,
							21, 22, 23, 24, 26, 28, 30, 32,
							22, 23, 24, 26, 28, 30, 32, 35,
							23, 24, 26, 28, 30, 32, 35, 38,
							25, 26, 28, 30, 32, 35, 38, 41,
							27, 28, 30, 32, 35, 38, 41, 45,
								 }
						#endif
						;
													/* Inverse of q-matrix for quantization */
	#define	QmtxInv(imtx, qmtx)			do{	SIGN32 mi;																\
											for(mi = 0; mi < 64; mi ++)												\
												(imtx)[mi] = UNSGDIV(65536, (qmtx)[mi]);							\
														}while(0)
	/* Standard matrix for H.264 main/high profile */
	Global	SIGN32	arrs32h264mtx4x4N	[]			/* H.264 4x4 inter matrix (high profile) */
						#ifdef	__MAIN__
						= {	10, 14, 20, 24,
							14, 20, 24, 27,
							20, 24, 27, 30,
							24, 27, 30, 34,
								 }
						#endif
						,
					arrs32h264mtx4x4I	[]			/* H.264 4x4 intra matrix (high profile) */
						#ifdef	__MAIN__
						= {	 6, 13, 20, 28,
							13, 20, 28, 32,
							20, 28, 32, 37,
							28, 32, 37, 42,
								 }
						#endif
						,
					arrs32h264mtx8x8N	[]			/* H.264 8x8 inter matrix (high profile) */
						#ifdef	__MAIN__
						= {	 9, 13, 15, 17, 19, 21, 22, 24,
							13, 13, 17, 19, 21, 22, 24, 25,
							15, 17, 19, 21, 22, 24, 25, 27,
							17, 19, 21, 22, 24, 25, 27, 28,
							19, 21, 22, 24, 25, 27, 28, 30,
							21, 22, 24, 25, 27, 28, 30, 32,
							22, 24, 25, 27, 28, 30, 32, 33,
							24, 25, 27, 28, 30, 32, 33, 35,
								 }
						#endif
						,
					arrs32h264mtx8x8I	[]			/* H.264 8x8 intra matrix (high profile) */
						#ifdef	__MAIN__
						= {	 6, 10, 13, 16, 18, 23, 25, 27,
							10, 11, 16, 18, 23, 25, 27, 29,
							13, 16, 18, 23, 25, 27, 29, 31,
							16, 18, 23, 25, 27, 29, 31, 33,
							18, 23, 25, 27, 29, 31, 33, 36,
							23, 25, 27, 29, 31, 33, 36, 38,
							25, 27, 29, 31, 33, 36, 38, 40,
							27, 29, 31, 33, 36, 38, 40, 42,
								 }
						#endif
						,
	GlobalAssign(*	arrs32h264mtx4x4	,			/* H.264 main profile matrix */
						mem_c16
						);
/**	ENDOFSECTION
 */

#ifdef	__cplusplus
	}
#endif



/**	MM_TBL
 */
#endif

/**	ENDOFFILE: mm_tbl.h ***********************************************************************************************
 */

