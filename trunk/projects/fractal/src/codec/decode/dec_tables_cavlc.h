/* -*- indent-tabs-mode:nil; c-basic-offset:4 -*- */

#ifndef _TABLES_CAVLC_H_
#define _TABLES_CAVLC_H_

#include "taah264stdtypes.h"
#include <limits.h>

/* Borrowed from Langley:
 *
 * Index is [code][intra ? 0 : 1]
 */
static const uint8_t inverse_cbp_code_tab[48][2] =
{
  { 47, 0}, { 31, 16}, { 15, 1}, { 0, 2}, { 23, 4}, { 27, 8}, { 29, 32}, { 30, 3}, { 7, 5}, { 11, 10}, { 13, 12}, { 14, 15},
  { 39, 47}, { 43, 7}, { 45, 11}, { 46, 13}, { 16, 14}, { 3, 6}, { 5, 9}, { 10, 31}, { 12, 35}, { 19, 37}, { 21, 42}, { 26, 44},
  { 28, 33}, { 35, 34}, { 37, 36}, { 42, 40}, { 44, 39}, { 1, 43}, { 2, 45}, { 4, 46}, { 8, 17}, { 17, 18}, { 18, 20}, { 20, 24},
  { 24, 19}, { 6, 21}, { 9, 26}, { 22, 28}, { 25, 23}, { 32, 27}, { 33, 29}, { 34, 30}, { 36, 22}, { 40, 25}, { 38, 38}, { 41, 41},
};



/* Borrowed from Langley:
 * u16 lzc_trailingonestab[3 * 128];
 *
 * Index is [vlc_num * 128 + leading_zeros * 8 + 'three next bits after first 1'].
 * Value is 16 bits on format:
 * [ trailing ones (2)  | num coeffs (5) | nothing (4) | code length (5) ]
 **/

static const uint16_t inverse_coeff_token_tab[3 * 128] =
{
  0x0021, 0x0021, 0x0021, 0x0021, 0x0021, 0x0021, 0x0021, 0x0021, 0x4222, 0x4222,
  0x4222, 0x4222, 0x4222, 0x4222, 0x4222, 0x4222, 0x8423, 0x8423, 0x8423, 0x8423,
  0x8423, 0x8423, 0x8423, 0x8423, 0x4486, 0x4486, 0x02a6, 0x02a6, 0xc665, 0xc665,
  0xc665, 0xc665, 0xca87, 0xca87, 0x86a7, 0x86a7, 0xc866, 0xc866, 0xc866, 0xc866,
  0xcc88, 0xcc88, 0x88a8, 0x88a8, 0x46c8, 0x46c8, 0x04e8, 0x04e8, 0xce89, 0xce89,
  0x8aa9, 0x8aa9, 0x48c9, 0x48c9, 0x06e9, 0x06e9, 0xd08a, 0xd08a, 0x8caa, 0x8caa,
  0x4aca, 0x4aca, 0x08ea, 0x08ea, 0xd28b, 0xd28b, 0x8eab, 0x8eab, 0x4ccb, 0x4ccb,
  0x0aeb, 0x0aeb, 0x110d, 0x932d, 0x514d, 0x0f6d, 0xd58d, 0x91ad, 0x4fcd, 0x0ded,
  0xd90e, 0x972e, 0x554e, 0x156e, 0xd78e, 0x95ae, 0x53ce, 0x13ee, 0xdd0f, 0x9b2f,
  0x594f, 0x196f, 0xdb8f, 0x99af, 0x57cf, 0x17ef, 0xe110, 0x9f30, 0x5f50, 0x1d70,
  0xdf90, 0x9db0, 0x5dd0, 0x1bf0, 0x2090, 0x2090, 0xa0b0, 0xa0b0, 0x60d0, 0x60d0,
  0x1ef0, 0x1ef0, 0x5a2f, 0x5a2f, 0x5a2f, 0x5a2f, 0x5a2f, 0x5a2f, 0x5a2f, 0x5a2f,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x4242, 0x4242, 0x4242, 0x4242, 0x0062, 0x0062, 0x0062, 0x0062, 0xc884, 0xc884,
  0xc6a4, 0xc6a4, 0x8463, 0x8463, 0x8463, 0x8463, 0xcd06, 0x8726, 0x4746, 0x0366,
  0xcac5, 0xcac5, 0x44e5, 0x44e5, 0xce86, 0xce86, 0x88a6, 0x88a6, 0x48c6, 0x48c6,
  0x04e6, 0x04e6, 0xd087, 0xd087, 0x8aa7, 0x8aa7, 0x4ac7, 0x4ac7, 0x06e7, 0x06e7,
  0x0a88, 0x0a88, 0x8ca8, 0x8ca8, 0x4cc8, 0x4cc8, 0x08e8, 0x08e8, 0xd289, 0xd289,
  0x8ea9, 0x8ea9, 0x4ec9, 0x4ec9, 0x0ce9, 0x0ce9, 0xd70b, 0x932b, 0x534b, 0x116b,
  0xd58b, 0x91ab, 0x51cb, 0x0feb, 0x170c, 0x972c, 0x574c, 0x156c, 0xd98c, 0x95ac,
  0x55cc, 0x13ec, 0xdd0d, 0x9b2d, 0x5b4d, 0x1b6d, 0xdb8d, 0x99ad, 0x59cd, 0x19ed,
  0x5f0e, 0x1f2e, 0x9f4e, 0x5d6e, 0x9ccd, 0x9ccd, 0x1ced, 0x1ced, 0xe08e, 0xe08e,
  0xa0ae, 0xa0ae, 0x60ce, 0x60ce, 0x20ee, 0x20ee, 0xde2d, 0xde2d, 0xde2d, 0xde2d,
  0xde2d, 0xde2d, 0xde2d, 0xde2d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0xcf04, 0xcd24, 0xcb44, 0xc964, 0xc784, 0x85a4, 0x43c4, 0x01e4, 0x4b05, 0x8b25,
  0x4945, 0x8965, 0x4785, 0xd1a5, 0x87c5, 0x45e5, 0x0706, 0x8f26, 0x4f46, 0x0566,
  0xd386, 0x8da6, 0x4dc6, 0x03e6, 0x0f07, 0x0d27, 0x9347, 0x0b67, 0xd587, 0x91a7,
  0x51c7, 0x09e7, 0xd908, 0x9728, 0x5548, 0x1368, 0xd788, 0x95a8, 0x53c8, 0x11e8,
  0x1909, 0x9b29, 0x5949, 0x1769, 0xdb89, 0x99a9, 0x57c9, 0x15e9, 0x5f0a, 0x1d2a,
  0xdd4a, 0x9d6a, 0x5d8a, 0x1baa, 0x5ae9, 0x5ae9, 0x608a, 0x608a, 0x1eaa, 0x1eaa,
  0xdeca, 0xdeca, 0x9eea, 0x9eea, 0xe04a, 0xe04a, 0xe04a, 0xe04a, 0xa06a, 0xa06a,
  0xa06a, 0xa06a, 0x202a, 0x202a, 0x202a, 0x202a, 0x202a, 0x202a, 0x202a, 0x202a,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};



/* Borrowed from Langley:
 * u16 lzc_trailingoneschromadc[36] + 2*12 bytes padding
 *
 * Index is [lead_zeros * 4 + 'two next bits after first 1'].
 * Value is 16 bits on format:
 * [ trailing ones (2)  | num coeffs (5) | nothing (5) | code length (4)]
 */
static const uint16_t inverse_coeff_token_chroma_dc_tab[36 + 12] =
{
  0x4221, 0x4221, 0x4221, 0x4221, 0x0022, 0x0022, 0x0022, 0x0022, 0x8423, 0x8423,
  0x8423, 0x8423, 0x0486, 0xc6a6, 0x44c6, 0x02e6, 0x0846, 0x0846, 0x0666, 0x0666,
  0x8647, 0x8647, 0x4667, 0x4667, 0x8848, 0x8848, 0x4868, 0x4868, 0xc807, 0xc807,
  0xc807, 0xc807, 0xc807, 0xc807, 0xc807, 0xc807,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};



/* Borrowed from Langley:
 * u8 lzc_totzerotab[15*40] + 8 bytes padding
 *
 * Index is
 * [(total_coeffs-1) * 40 + lead_zeros * 4 + 'next two bits after first 1']
 *
 * Value is 8 bits on format
 * [ total_zeros (4) | code length (4) ]
 */
static const uint8_t inverse_total_zeros_tab [15 * 40 + 8] =
{
  0x01, 0x01, 0x01, 0x01, 0x23, 0x23, 0x13, 0x13, 0x44, 0x44, 0x34, 0x34, 0x65, 0x65, 0x55, 0x55, 0x86, 0x86, 0x76, 0x76,
  0xa7, 0xa7, 0x97, 0x97, 0xc8, 0xc8, 0xb8, 0xb8, 0xe9, 0xe9, 0xd9, 0xd9, 0xf9, 0xf9, 0xf9, 0xf9, 0x00, 0x00, 0x00, 0x00,
  0x33, 0x23, 0x13, 0x03, 0x64, 0x54, 0x43, 0x43, 0x84, 0x84, 0x74, 0x74, 0xa5, 0xa5, 0x95, 0x95, 0xc6, 0xc6, 0xb6, 0xb6,
  0xd6, 0xd6, 0xd6, 0xd6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
  0x63, 0x33, 0x23, 0x13, 0x44, 0x04, 0x73, 0x73, 0x84, 0x84, 0x54, 0x54, 0xa5, 0xa5, 0x95, 0x95, 0xc5, 0xc5, 0xc5, 0xc5,
  0xb6, 0xb6, 0xb6, 0xb6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6,
  0x63, 0x53, 0x43, 0x13, 0x34, 0x24, 0x83, 0x83, 0x94, 0x94, 0x74, 0x74, 0xa5, 0xa5, 0x05, 0x05, 0xb5, 0xb5, 0xb5, 0xb5,
  0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5,
  0x63, 0x53, 0x43, 0x33, 0x14, 0x04, 0x73, 0x73, 0x84, 0x84, 0x24, 0x24, 0xa4, 0xa4, 0xa4, 0xa4, 0x95, 0x95, 0x95, 0x95,
  0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5,
  0x53, 0x43, 0x33, 0x23, 0x73, 0x73, 0x63, 0x63, 0x93, 0x93, 0x93, 0x93, 0x84, 0x84, 0x84, 0x84, 0x15, 0x15, 0x15, 0x15,
  0x06, 0x06, 0x06, 0x06, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6,
  0x33, 0x23, 0x52, 0x52, 0x63, 0x63, 0x43, 0x43, 0x83, 0x83, 0x83, 0x83, 0x74, 0x74, 0x74, 0x74, 0x15, 0x15, 0x15, 0x15,
  0x06, 0x06, 0x06, 0x06, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96,
  0x52, 0x52, 0x42, 0x42, 0x63, 0x63, 0x33, 0x33, 0x73, 0x73, 0x73, 0x73, 0x14, 0x14, 0x14, 0x14, 0x25, 0x25, 0x25, 0x25,
  0x06, 0x06, 0x06, 0x06, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86,
  0x42, 0x42, 0x32, 0x32, 0x62, 0x62, 0x62, 0x62, 0x53, 0x53, 0x53, 0x53, 0x24, 0x24, 0x24, 0x24, 0x75, 0x75, 0x75, 0x75,
  0x06, 0x06, 0x06, 0x06, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16,
  0x42, 0x42, 0x32, 0x32, 0x52, 0x52, 0x52, 0x52, 0x23, 0x23, 0x23, 0x23, 0x64, 0x64, 0x64, 0x64, 0x05, 0x05, 0x05, 0x05,
  0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
  0x41, 0x41, 0x41, 0x41, 0x33, 0x33, 0x53, 0x53, 0x23, 0x23, 0x23, 0x23, 0x14, 0x14, 0x14, 0x14, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
  0x31, 0x31, 0x31, 0x31, 0x22, 0x22, 0x22, 0x22, 0x43, 0x43, 0x43, 0x43, 0x14, 0x14, 0x14, 0x14, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
  0x21, 0x21, 0x21, 0x21, 0x32, 0x32, 0x32, 0x32, 0x13, 0x13, 0x13, 0x13, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
  0x21, 0x21, 0x21, 0x21, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x11, 0x11, 0x11, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0, 0, 0, 0, 0, 0, 0, 0
};


/* Borrowed from Langley:
 * u8 lzc_totalzeroschromadctab[3][8] + 8 bytes padding
 *
 * Index is
 * [(total_coeffs-1) * 8 + lead_zeros * 2  + 'next one bit after first 1']
 *
 * Value is 8 bits on format
 * [ total_zeros (4) | code length (4) ]
 */
static const uint8_t inverse_total_zeros_chroma_dc_tab[3 * 8 + 8] =

{
  0x01, 0x01, 0x12, 0x12, 0x23, 0x23, 0x33, 0x33,
  0x01, 0x01, 0x12, 0x12, 0x22, 0x22, 0x22, 0x22,
  0x01, 0x01, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
  0, 0, 0, 0, 0, 0, 0, 0
};

/* Borrowed from Langley:
 * u8 new_lzc_runtab[56] + 8 bytes padding
 *
 * Index is
 * [(zeros_left-1) * 8 + 'first three bits']
 *
 * Value is 8 bits on format
 * [ run_before (4) | code length (4) ]
 *
 * NOTE: There is one exception to the value. If value is '0x00', then code
 * length is (leading_zeros + 1), and run_before is (leading_zeros + 4). See
 * table 9-10 entries (>6, >6)
 */


static const uint8_t inverse_run_before_tab [56 + 8] =
{
  0x11, 0x11, 0x11, 0x11, 0x01, 0x01, 0x01, 0x01,       /* zeros left = 1 */
  0x22, 0x22, 0x12, 0x12, 0x01, 0x01, 0x01, 0x01,       /* zeros left = 2 */
  0x32, 0x32, 0x22, 0x22, 0x12, 0x12, 0x02, 0x02,       /* zeros left = 3 */
  0x43, 0x33, 0x22, 0x22, 0x12, 0x12, 0x02, 0x02,       /* zeros left = 4 */
  0x53, 0x43, 0x33, 0x23, 0x12, 0x12, 0x02, 0x02,       /* zeros left = 5 */
  0x13, 0x23, 0x43, 0x33, 0x63, 0x53, 0x02, 0x02,
  0x00, 0x63, 0x53, 0x43, 0x33, 0x23, 0x13, 0x03,
  0, 0, 0, 0, 0, 0, 0, 0
};

static const int vlc_threshold_tab[7] =
{
  0, 3, 6, 12, 24, 48, INT_MAX
};

#endif
